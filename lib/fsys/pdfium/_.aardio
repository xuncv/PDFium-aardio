namespace fsys
import util.metaProperty;
import gdip.bitmap;

var dll = ..raw.loadDll( ..io.appData("~\aardio\pdfium\pdfium1.0.dll",$"~\lib\fsys\pdfium\.dll\pdfium.dll"),,"cdecl" );

class pdfium{
	ctor( pdfPath,password="" ){
		init();
		
		if(!pdfPath){
			this.hPdfDoc = dll.FPDF_CreateNewDocument();
		}
		elseif(type.isString(pdfPath) and ..string.startWith(pdfPath,"http",true) && ..inet[["http"]]){
			var data,err = ..inet.http.get(pdfPath);
			if(!data) return null,err;
			
			this.hPdfDoc = dll.FPDF_LoadMemDocumentP(data,#data,password)
		}
		elseif(type.isString(pdfPath) and #pdfPath > 0x410/*_MAX_PATH_U8*/){
			this.hPdfDoc = dll.FPDF_LoadMemDocumentP(pdfPath,#pdfPath,password)
		}
		else {
			pdfPath = ..io.fullpath(pdfPath)
			this.hPdfDoc = dll.FPDF_LoadDocumentP(pdfPath,password)
		}
		
		if(!this.hPdfDoc) return null,lasterr();

		..table.gc(this,"destroy");
	};
	
	
	extractBookmarks = function(){
		return self.bookmark(this.hPdfDoc,0); 
	};
	
	eachTextRect = function(){
		var textPage = dll.FPDFText_LoadPageP(this.currentPage);
		var textCountChars = dll.FPDFText_CountChars(textPage);
		var rectCount = dll.FPDFText_CountRects(textPage,0,textCountChars)
		var rectIndex = 0;
		
		return function(){
			var err,left,top,right,bottom = FPDFText_GetRect(textPage,rectIndex,0,0,0,0)

			var len = FPDFText_GetBoundedText(textPage,left,top,right,bottom,null,0)
			var buffer = ..raw.buffer(len*2);
			len = FPDFText_GetBoundedText(textPage,left,top,right,bottom,buffer,len);
			
			rectIndex++
			if rectIndex > rectCount return null; 
			
			return round(left),round(top),round(right),round(bottom),..string.fromUnicode( buffer ); 
		}; 	
	}

	getMeta = function(){
		var keys = {"Title";"Author";"Subject";"Keywords";"Creator";"Producer";"CreationDate";"ModDate"}
		var meta = {}
		
		for(k,v in keys){
			var len = dll.FPDF_GetMetaText(this.hPdfDoc,v,null,null)
			var buffer = ..raw.buffer(len)
			
			len = dll.FPDF_GetMetaText(this.hPdfDoc,v,buffer,len)
			meta[v] = ..string.fromUnicode( buffer )
		}
		return meta
	}
	
	extractText = function(){
		if(!this.currentPage) error("请先指定 pageNum 属性！",2);
		
		var textPage = dll.FPDFText_LoadPageP(this.currentPage);
		var textCountChars = dll.FPDFText_CountChars(textPage);
		var buffer = ..raw.buffer( textCountChars*2 );
		var num = dll.FPDFText_GetText(textPage,0,textCountChars,buffer);
		
		return ..string.fromUnicode( buffer );
	}
	
	asBitmap = function(bgcolor){
		if(!this.currentPage) error("请先指定 pageNum 属性！",2);
		
		var bit = dll.FPDFBitmap_CreateP( owner.pageWidth,owner.pageHeight,0 )
		dll.FPDFBitmap_FillRect(bit,0,0,owner.pageWidth,owner.pageHeight,bgcolor || 0xFFFFFFFF);
		dll.FPDF_RenderPageBitmap(bit,this.currentPage,0,0,owner.pageWidth,owner.pageHeight,0,0x02 | 0x01);
		
		var buffer = dll.FPDFBitmap_GetBufferP(bit);
		var stride = dll.FPDFBitmap_GetStride(bit);
		
		var bitmap,err = ..gdip.bitmap( owner.pageWidth,owner.pageHeight,0x26200A/*_PixelFormat32bppARGB*/,buffer,stride )
		if(!bitmap) dll.FPDFBitmap_Destroy(bit)
		return bitmap,err; 
	}
	
	destroy = function(){
		if(this.currentPage){
			dll.FPDF_ClosePage(this.currentPage);
			this.currentPage = null
		}
		dll.FPDF_CloseDocument(this.hPdfDoc);
	}
	
	@_metaProperty;	
}

namespace pdfium{
	
	FPDFText_GetRect= dll.api("FPDFText_GetRect","bool(pointer text_page,int rect_index,double& left,double& top,double& right,double& bottom)");
	FPDFText_GetBoundedText= dll.api("FPDFText_GetBoundedText","int(pointer text_page,double left,double top,double right,double bottom,pointer buffer,int buflen)");
	
	init = function(cfg){
		if(self.initialized) return;
		
		self.initialized = true;
		
		cfg = ..table.assign({
			int version = 2;
			ptr userFontPaths;
			ptr isolate;
			INT v8EmbedderSlot;
			pointer platform;
			INT rendererType;
		},cfg);
		
		if(type(cfg.userFontPaths)==type.table){
			self.userFontPaths = cfg.userFontPaths;
			self.userFontPathsPtr = ..raw.buffer({ptr items[]=cfg.userFontPaths});
			cfg.userFontPaths = self.userFontPathsPtr;
		}

		dll.FPDF_InitLibraryWithConfig(cfg);
	}
	
	..table.gc(self,function(){
		if(self.initialized){
			 dll.FPDF_DestroyLibrary();
			 self.initialized = null;
		}
	});
	
	lasterr = function(){
		var msg = {  
			[2]="File not found or could not be opened";
			[3]="File not in PDF format or corrupted";
			[4]="Password required or incorrect password";
			[5]="Unsupported security scheme";
			[6]="Page not found or content error";
			[7]="Load XFA error";
			[8]="Layout XFA error";
		}
		
		var e = dll.FPDF_GetLastError();
		if(e) return msg[e] : "Unknown error " + e;
	}
		
	round = ..math.round;
	
	_metaProperty = ..util.metaProperty(
		_topointer = lambda() owner.hPdfDoc;
		pageCount = {
			_get = function(){ 
				return dll.FPDF_GetPageCount(owner.hPdfDoc)
			}	 
		};
		pageWidth = {
			_get = function(){ 
				return round( dll.FPDF_GetPageWidthF(owner.currentPage) ); 
			}
		};
		pageHeight = {
			_get = function(){ 
				return round( dll.FPDF_GetPageHeightF(owner.currentPage) ); 
			}
		};
		pageNum = {
			_get = function(){
				return owner[["(pageNum)"]] : 0
			}
			_set = function(value){
				value = tonumber(value);
				
				if(!value || value<1 || value>owner.pageCount){
					error("页码超过 PDF 范围",2)
				}
		
				if(owner.currentPage){
					dll.FPDF_ClosePage(owner.currentPage);
					owner.currentPage = null
				}
				owner.currentPage = dll.FPDF_LoadPageP(owner.hPdfDoc,value-1);
				owner[["(pageNum)"]] = value;
			}
		};
		createPage = function(index,width,height){
			if(owner.currentPage){
				dll.FPDF_ClosePage(owner.currentPage);
				owner.currentPage = null
			}
			
			if(index>owner.pageCount) index = owner.pageCount +1;
			owner.currentPage = FPDFPage_New(owner.currentPage,index-1,..raw.double(),..raw.double()); 
			
			if(owner.currentPage){
				owner[["(pageNum)"]] = index;
				return true;
			}
		};
		deletePage = function(index){
			if(owner[["(pageNum)"]]===index){
				if(owner.currentPage){
					dll.FPDF_ClosePage(owner.currentPage);
					owner.currentPage = null
				}
				
				owner[["(pageNum)"]] = 0;
			}
			
			
			dll.FPDFPage_Delete(owner.hPdfDoc,index-1);
		};
		importPages = function(srcPdf,index,pageIndicesOrRange){
			if(!index) index = owner.pageCount + 1;
			
			if(!srcPdf[["hPdfDoc"]]) {
				srcPdf = ..fsys.pdfium(srcPdf);
				if(srcPdf){
					owner.importPages(srcPdf,index,pageIndicesOrRange);
					srcPdf.destroy();
					return;
				}
				
				error("参数 @1 必须指定 fsys.pdfium 对象",2);
			}
			
			if(!#pageIndicesOrRange){
				return !!dll.FPDF_ImportPagesByIndex(owner.hPdfDoc,srcPdf.hPdfDoc,,0,index-1); 	
			}
			
			if(type(pageIndicesOrRange)=="table"){
				var indices = {}
				for(i,v in pageIndicesOrRange) indices[i] = v-1;
				return dll.FPDF_ImportPagesByIndex(owner.hPdfDoc,srcPdf.hPdfDoc,{int pages[]=indices},#indices,index-1);
			}
			else{
				return dll.FPDF_ImportPages(owner.hPdfDoc,srcPdf.hPdfDoc,pageIndicesOrRange,index-1);	
			}
		};
		copyViewerPreferences = function(srcPdf){
			if(!srcPdf[["hPdfDoc"]]) {
				srcPdf = ..fsys.pdfium(srcPdf);
				if(srcPdf){
					owner.copyViewerPreferences(srcPdf);
					srcPdf.destroy();
					return;
				}
				
				error("参数 @1 必须指定 fsys.pdfium 对象",2);
			}
			return !!dll.FPDF_CopyViewerPreferences(owner.hPdfDoc,src.hPdfDoc);
		};
		render = function(hdcOrGraphics,x,y,cx,cy,rotate,flags){
			if(!owner.currentPage) error("请先指定 pageNum 属性！",2);
			
			if(type(hdcOrGraphics)=="table"){
				var hdc = hdcOrGraphics.getDc();
				owner.render(hdc,x,y,cx,cy,rotate,flags);
				hdcOrGraphics.releaseDc(hdc);
				return;
			}
			
			dll.FPDF_RenderPage(hdcOrGraphics,owner.currentPage,x,y,cx,cy,rotate,flags); 
		};
		saveAsCopy = function(callback,fileVersion,flags){
			var writer = { 
  				int version = 1; 
  				ptr onWrite = ..raw.tocdecl(callback,"int(ptr pWriter,ptr pData,INT size)",owner);
  			};
  			
  			if(fileVersion){
  				return !!dll.FPDF_SaveWithVersion(owner.hPdfDoc,writer,flags,fileVersion);
  			}
  			else {
  				return !!dll.FPDF_SaveAsCopy(owner.hPdfDoc,writer,flags);
  			}
		};
		save = function(path,fileVersion,flags){
			var file,err = ..io.open(path,"w+b");
			if(!file) return null,err; 
			
			var ret = owner.saveAsCopy( function(pWriter,pData,size){
				return file.writeBuffer(pData,size);
			},fileVersion,flags) 
			
			file.close();
			return ret;
		};
		
	)
			
	class bookmark{
		
		ctor( hPdfDoc,handle ){
			this.hPdfDoc = hPdfDoc;
			this.handle = handle;
		};

		asTree = function(){
			var treeData = {}; 
			var enumInfo;
			enumInfo = function(info,td,parent){  
				for(k,v in info.children){    
					if( v.children ){
						var children = {text = v.title;pageIndex = v.pageIndex}
						..table.push(td,children); 
						enumInfo(v,children,info); 
					}
					else {
						..table.push(td,{text = v.title;pageIndex = v.pageIndex;}); 
					} 
				}
			} 
			enumInfo(this,treeData);
			return treeData; 
		};
		
		@_bmMeta;
	}
	
	namespace bookmark{ 
		_bmMeta = ..util.metaProperty(
			children = {
				_get = function(){
					var c = {}
					var h = dll.FPDFBookmark_GetFirstChildP(owner.hPdfDoc,owner.handle)
					if(h){
						do{
							..table.push( c,..fsys.pdfium.bookmark(owner.hPdfDoc,h) )
							h = dll.FPDFBookmark_GetNextSiblingP(owner.hPdfDoc,h)
						}while(h)
					}
					return c; 
				} 	
			}
			
			title = {
				_get = function(){ 
					var len = dll.FPDFBookmark_GetTitle(owner.handle,0,0)
					if(len>2){
					var buffer = ..raw.buffer( len-2 )
						len = dll.FPDFBookmark_GetTitle(owner.handle,buffer,len)
						return ..string.fromUnicode(buffer,,-1);		
					}

				}	
			};
			
			pageIndex = {
				_get = function(){
					var dst = dll.FPDFBookmark_GetDestP(owner.hPdfDoc,owner.handle)
					var pageIndex = dll.FPDFDest_GetDestPageIndex(owner.hPdfDoc,dst)
					return pageIndex + 1; 	
				}		
			}
		)	
	} 
}

PDFium = pdfium;//@Deprecated

/**details(项目主页)
https://github.com/xuncv/PDFium-aardio
end details**/

/**intellisense()
fsys.pdfium = 基于 Google 开源组件 PDFium 封装的 PDF 解析库
fsys.pdfium() = !fsysPdfium.
fsys.pdfium(.(PDF路径或数据,PDF密码) = 创建或打开 PDF 解析文档对象。\n参数 @1 可指定 PDF 文件路径或数据。\n如果事先导入 inet.http，参数 @1 也可以指定 PDF 文件网址。\n指定网址且下载 PDF 时不卡界面
end intellisense**/

/**intellisense(fsys.pdfium)
init() = 可选调用此函数初始化 PDFium 组件，\n用法请参考函数源码与 PDFium 文档。\n一般不必主动调用此函数
lasterr() = 返回错误信息。\n如果最后一次操作成功则返回 null
end intellisense**/

/**intellisense(!fsysPdfium)
destroy() = 释放对象
pageNum = 读取或设置当前活动页码，页码自 1 开始
extractBookmarks() = 提取目录,返回 fsys.pdfium.bookmark 对象
getMeta() = 获取pdf属性表
extractText() = 提取当前页文本
asBitmap() = 当前页转换为 gdip.bitmap 对象
eachTextRect() = 遍历当前页文本块
eachTextRect() = @for left,top,right,bottom,text in ??.eachTextRect(){
	__/*遍历当前页文本区块。\nleft,top,right,bottom 分别为左上右下位置。\ntext 为文本*/
}
render( = 窗口绘图
render(.(hdcOrGraphics,x,y,cx,cy,rotate,flags) = 参数 @hdcOrGraphics 可指定 hdc 或 graphics 对象，\n@x,@y 指定 x,y 坐标，@cx 指定宽，@cy 指定高。\n@rotate 为 1 顺时针转 90 度，设为 2 转 180 度，设为 3 为逆时针转 90 度\n@rotate 与 @flags 一般不必指定
createPage(.(index,width,height) = 创建页面。\n@index 指定页码，@width 指定宽，@height 指定高
deletePage(__) = 删除参数 @1 指定页码的页面，起始页码为 1。\n如果删除 pageNum 指定的页码则关闭当前页，且 pageNum 设为 0
importPages(.(srcPdf,index,pageIndicesOrRange) = 导入并合并 PDF。\nsrcPdf 指定要导入的 fsys.pdfium 对象，也可指定 PDF 路径或数据。\n@index 指定要插入的页码，不指定则添加到尾部。\n@pageIndicesOrRange 可以指定页码数组，\n也可以用字符串指定区间，示例："1,3,5-7"。\n省略 @pageIndicesOrRange 则导入所有页面
copyViewerPreferences(srcPdf) = 导入 PDF 设置。\nsrcPdf 指定要导入的 fsys.pdfium 对象，也可指定 PDF 路径或数据
saveAsCopy(callback,fileVersion,flags) = @.saveAsCopy( function(pWriter,pData,size){\n	__/*保存 PDF 回调函数，其他为可选调用参数（不用管）。\n回调参数 pData 为要写入的内存指针，回调参数 size 为待写入长度。\n保存成功请返回非零数值，出错返回 0*/\n}) 
save( = 保存 PDF 文件
save(.(path,fileVersion,flags) = 保存 PDF 到文件，成功返回 true。\n@path 指定文件路径。\n可选用 @fileVersion 指定文件版本，15 表示版本 1.5。\n@flags 为可选参数，一般不用指定，用法请参考 PDFium 文档
end intellisense**/

/**intellisense()
_FPDFBitmap_Unknown=@0/*_FPDFBitmap_Unknown*/
_FPDFBitmap_Gray=@1/*_FPDFBitmap_Gray*/
_FPDFBitmap_BGR=@2/*_FPDFBitmap_BGR*/
_FPDFBitmap_BGRx=@3/*_FPDFBitmap_BGRx*/
_FPDFBitmap_BGRA=@4/*_FPDFBitmap_BGRA*/
end intellisense**/