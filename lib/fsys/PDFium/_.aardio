namespace fsys
import console
import util.metaProperty;

class PDFium{
	ctor( pdfPath,password="" ){
		this.LIBRARY_CONFIG = {
			int version = 2;
			pointer m_pUserFontPaths = 0;
			pointer m_pIsolate = 0;
			INT m_v8EmbedderSlot = 0;
			pointer m_pPlatform = 0;
		}
		dll.FPDF_InitLibraryWithConfig(topointer(this.LIBRARY_CONFIG))
		this.doc = dll.FPDF_LoadDocumentP(pdfPath,password)
		..table.gc(this,"destroy")
		this.pageNum = 0	
	};
	//载入某一页
	loadPage = function(idx=0){
		if(this.page){
			dll.FPDF_ClosePage(this.page);
			this.page = null
		}
		this.page = dll.FPDF_LoadPage(this.doc,idx)
	}
	
	extractBookmarks = function(){
		var h = 0
		var bookmarks = self.bookmark(this.doc,h);
		return bookmarks
	}
	
	//结构化输出 todo
	
	getMeta = function(){
		var keys = {"Title";"Author";"Subject";"Keywords";"Creator";"Producer";"CreationDate";"ModDate"}
		var meta = {}
		for(k,v in keys){
			var len = dll.FPDF_GetMetaText(this.doc,v,null,null)
			var buffer = ..raw.buffer(len)
			len = dll.FPDF_GetMetaText(this.doc,v,buffer,len)
			meta[v] = ..string.fromUnicode( buffer )
			buffer = null
		}
		return meta
	}
	//提取文本
	extractText = function(){
		var textPage = dll.FPDFText_LoadPageP(this.page);
		var textCountChars = dll.FPDFText_CountChars(textPage);
		var buffer = ..raw.buffer( textCountChars*2 )
		var num = dll.FPDFText_GetText(textPage,0,textCountChars,buffer)
		return ..string.fromUnicode( buffer )
	}
	
	destroy = function(){
		dll.FPDF_CloseDocument(this.doc)
		dll.FPDF_DestroyLibrary()
	}
	@_metaProperty;	
}

namespace PDFium{
	dll = ..raw.loadDll( "~\lib\fsys\PDFium\.dll\pdfium.dll",,"cdecl" )
	class bookmark{
		ctor( doc,handle ){
			this.doc = doc;
			this.handle = handle;
			this.treeBookmarks = {};
		};

		asTree = function(){
			var treeData = {}; 
			var enumInfo;
			enumInfo = function(info,td,parent){  
				for(k,v in info.children){    
					if( v.children ){
						var children = {text = v.title;pageIndex = v.pageIndex}
						..table.push(td,children); 
						enumInfo(v,children,info); 
					}
					else {
						..table.push(td,{text = v.title;pageIndex = v.pageIndex;}); 
					} 
				}
			} 
			enumInfo(this,treeData);
			return treeData; 
		};
		
		@_bmMeta;
	}	
	_metaProperty = ..util.metaProperty(
		pageCount = {
			_get = function(){ 
				return dll.FPDF_GetPageCount(owner.doc)
			}	
		};
		pageWidth = {
			_get = function(){
				if(!owner.page) owner.loadPage()
				return dll.FPDF_GetPageWidthF(owner.page); 
			}
		}
		//FPDF_RenderPageBitmap
		pageHeight = {
			_get = function(){
				if(!owner.page) owner.loadPage()
				return dll.FPDF_GetPageHeightF(owner.page); 
			}
		}
	)
}

namespace PDFium.bookmark{
    var dll = ..fsys.PDFium.dll
	_bmMeta = ..util.metaProperty(
    	children = {
    		_get = function(){
    			var c = {}
    			var h = dll.FPDFBookmark_GetFirstChildP(owner.doc,owner.handle)
    			if(h){
					do{
    					..table.push( c,..fsys.PDFium.bookmark(owner.doc,h) )
    					h = dll.FPDFBookmark_GetNextSiblingP(owner.doc,h)
    				}while(h)
    			}
    			return c; 
    		} 	
    	}
    	
    	title = {
    		_get = function(){ 
				var len = dll.FPDFBookmark_GetTitle(owner.handle,0,0)
				var buffer = ..raw.buffer( len*2 )
				len = dll.FPDFBookmark_GetTitle(owner.handle,buffer,len)
				return ..string.fromUnicode(buffer);
    		}	
    	};
    	
    	pageIndex = {
    		_get = function(){
				var dst = dll.FPDFBookmark_GetDestP(owner.doc,owner.handle)
				var pageIndex = dll.FPDFDest_GetDestPageIndex(owner.doc,dst)
				return pageIndex; 	
    		}	   	
    	}
	)	
}
